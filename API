<!DOCTYPE html>
<!-- 
https://www.khanacademy.org/computer-programming/peppermint-falls-chalet-gingerbread-house-contest-entry/5061077834006528/5691726094139392.png
https://www.khanacademy.org/computer-programming/isometric-3d-terrain-generator/4809439308152832/5643440998055936.png

-->
<html>
    <head>
        <meta charset="utf-8">
        <title>API for "Landscape Studios"</title>
        
        <!-- API Styles -->
        <style id="LandscapeAPIStyleSheet">
            /* Toolbar */
            .LandscapeAPIToolbar {
                background : rgba(48, 48, 48, 0.8);
                color : #ccc;
                text-shadow : -1px 0px black;
                width : 150px;
                padding : 10px;
                border-radius : 5px;
                text-align : center;
                font-family : monospace;
                box-sizing : border-box;
            }
            .LandscapeAPIToolbar * {
                width : 100%;
                margin-top : 0;
                margin-bottom : 10px;
                
            }
            
            .LandscapeAPIToolbar h1 {
                font-size : 20px;
            }
            .LandscapeAPIToolbar h2 {
                font-size : 15px;
            }
            .LandscapeAPIToolbar h3 {
                font-size : 13px;
            }
            .LandscapeAPIToolbar h2,h3,h4,h5,h6 {
                border-bottom : 2px groove grey;
            }
            
            .LandscapeAPIToolbar button, .button {
                background : linear-gradient(355deg, rgb(255, 60, 0) 19%, rgb(255, 113, 61) 64%);
                background : -moz-linear-gradient(355deg, rgb(255, 60, 0) 19%, rgb(255, 113, 61) 64%);
                background : -webkit-linear-gradient(276deg, rgb(255, 60, 0) 19%, rgb(255, 113, 61) 64%);
                background : -o-linear-gradient(355deg, rgb(255, 60, 0) 19%, rgb(255, 113, 61) 64%);
                
                color : white;
                border : none;
                outline : none;
                border-radius : 3px;
                padding : 4px;
                font-size : 12px;
            }
            .LandscapeAPIToolbar button:hover, .button:hover {
                background : rgb(255, 116, 61);
            }
            .LandscapeAPIToolbar button:active, .button:active {
                background : rgb(255, 60, 0);
            }
            .LandscapeAPIToolbar button:focus, .button:focus {
                box-shadow : 0px 0px 0.5px 1.5px #aa80ff;
            }
            
            .LandscapeAPIToolbar details {
                text-align : left;
                border-bottom : 2px groove gray;
                border-radius : 0;
                margin : 3px;
            }
            .LandscapeAPIToolbar summary {
                outline : none;
            }
            .LandscapeAPIToolbar .LandscapeAPIToolbar {
                background : transparent;
                width : 100%;
                padding : 0;
                margin-bottom : 0;
            }
            
            /* Tabs */
            .tabsDiv {
                border-radius : 10px;
            }
            .tabsContainer {
                background : rgba(48, 48, 48, 0.8);
            }
            .tabsBar {
                height : 25px;
                border-radius : 10px 10px 0 0;
                background : rgba(48, 48, 48, 0.8);
                border-bottom : 4px double rgb(111, 194, 70);
            }
            .tabsBar .tab {
                width : 80px;
                height : 25px;
                box-sizing : border-box;
                float : left;
                border-radius : 10px 10px 0 0;
                border : 1px solid black;
                padding-left : 10px;
                font-size : 13px;
                font-family : monospace;
                overflow : hidden;
                color : black;
            }
            .tabsBar .tab.active {
                box-shadow : none;
                color : white;
                background : rgb(255, 116, 61);
            }
        </style>
    </head>
    <body>
    
    </body>

<!-- Useful Functions -->
<script id="usefulFunctionsScript">

// HTML
function styleElement (el, styles) {
    for (var i in styles) {
        el.style[i] = styles[i];
    }
};
function createEl (type, classes, id) {
    var el = document.createElement(type);
    if (typeof classes === "string") {
        el.classList.add(classes);
    }
    else {
        for (var i = 0; i < classes.length; i ++) {
            el.classList.add(classes[i]);
        }
    }
    if (id !== undefined) {
        el.id = id;
    }
    
    return el;
};
function createDiv (classes, id) {
    var el = createEl("div", classes, id);
    return el;
};

// Defined/undefined control
function exists(val) {
    return val !== undefined && val !== null;
}
function Default(val, defVal) {
    if (!exists(val)) { val = defVal; }
    return val;
};

</script>

<!-- Toolbar -->
<script id="toolbarScript">

var toolbarID = 0;
function Toolbar (parent, config) {
    parent = parent || document.body;
    config = config || {};
    config.style = config.style || {};
    config.childrenStyle = config.childrenStyle || {};
    
    this.parent = parent;
    this.config = config;
    
    this.constructToolbarElement();
    this.constructToolbarStyles();
};
Toolbar.prototype = {
    /* Constructor */
    constructToolbarElement : function () {
        // Create the toolbar
        this.element = document.createElement("div");
        
        // Give the toolbar a unique ID class
        this.element.classList.add("LandscapeToolbarID_"+toolbarID);
        toolbarID ++;
        
        // Give the toolbar other classes and an id
        Default(this.element.id, this.config.id); // id
        this.element.classList.add("LandscapeAPIToolbar");
        this.config.classList = this.config.classList || [];
        for (var i = 0; i < this.config.classList.length; i ++) {
            this.element.classList.add(this.config.classList[i]);
        } // classes
        
        // Add the toolbar to the parent element
        this.parent.appendChild(this.element);
    },
    constructToolbarStyles : function () {
        styleElement(this.element, this.config.style);
    },
    
    /* Add Elements */
    addElement : function (elType, innerHTML, config) {
        config = config || {};
        var el;
        if (typeof elType === "string") {
            el = document.createElement(elType);
            el.innerHTML = innerHTML || "";
            
            styleElement(el, this.config.childrenStyle);
            if (exists(config.style)) {
                styleElement(el, config.style);
            }
            if (exists(config.classList)) {
                for (var i = 0; i < config.classList.length; i ++) {
                    el.classList.add(config.classList);
                }
            }
            if (exists(config.id)) { el.id = config.id; }
        }
        else { el = elType; }
        el.classList.add("LandscapeAPIComponent");
        this.element.appendChild(el);
        
        return el;
    },
    addButton : function (name, events, config) {
        events = events || [];
        var btn = this.addElement("button", name, config);
        for (var i = 0; i < events.length; i ++) {
            btn.addEventListener(events[i].event, events[i].callback);
        }
        return btn;
    },
    addToolbar : function (name, config) {
        config = Object.assign(this.config, config);
        
        var section = this.addElement("details");
        section.setAttribute("open", "open");
        
        var label = document.createElement("summary");
        label.innerHTML = name;
        section.appendChild(label);
        
        var tlbr = new Toolbar (section, config);
        return tlbr;
    },
};

var toolbr = new Toolbar ();
var button = toolbr.addElement("button", "Click Me!", {
    style : { backgroundColor : "red" },
    classList : [ "myButtons", "clicker", "LandscapeButton", "exclamatory_sentence" ],
    id : "A_particular_button"
});
var t2 = toolbr.addToolbar ("Subtoolbar");
t2.addButton ("Hello");
var t4 = toolbr.addToolbar ("A Closed Toolbar");
t4.addButton ("A Button");
var t3 = toolbr.addToolbar ("Another one");
t3.addButton ("toolbar")
t3.addButton ("Button");
t3.addButton ("Another!??");

function Tabs (config) {
    this.tabs = [];
    this.openTab = 0;
    
    this.constructEls ();
};
Tabs.prototype = {
    constructEls : function () {
        this.element = createDiv(["tabsDiv"]);
        this.tabsBar = createEl("nav", ["tabsBar"]);
        this.tabsContainer = createDiv(["tabsContainer"]);
        
        this.element.appendChild(this.tabsBar);
        this.element.appendChild(this.tabsContainer);
        
        document.body.appendChild(this.element);
    },
    
    setTab : function (index) {
        for (var i = 0; i < this.tabs.length; i ++) {
            this.tabs[i].tabEl.classList.remove("active");
            this.tabs[i].element.style.display = "none";
        }
        this.tabs[index].element.style.display = "block";
        this.tabs[index].tabEl.classList.add("active");
    },
    
    addTab : function (title, element) {
        this.tabs.push({
            title : title,
            element : element,
        });
        
        element.classList.add("tabContent");
        
        var tab = document.createElement("div");
        tab.classList.add("tab");
        tab.classList.add("button");
        var self = this;
        var tabNum = this.tabs.length-1;
        this.tabs[tabNum].tabEl = tab;
        tab.addEventListener("click", function () {
            self.setTab(tabNum)
        });
        tab.innerHTML = "<div class='tabText'>"+title+"</div>";
        
        this.tabsBar.appendChild(tab);
        this.tabsContainer.appendChild(element);
        
        this.setTab(0);
    }
};

var tab = new Tabs();
tab.addTab("Hello", toolbr.element);
tab.addTab("Goodbye", document.createElement("div"));
tab.addTab("Hello", document.createElement("div"));
tab.addTab("Goodbye", document.createElement("div"));
</script>

<!-- Scripting -->
<script>

function HTMLCode (parent, iframe, config) {
    this.parent = parent || document.body;
    
    this.iframe = iframe;
    this.constructEls (iframe, config);
}
HTMLCode.prototype = {
    constructEls : function (iframe, config) {
        this.element = document.createElement("textarea");
        this.element.classList.add("codeEditor");
        
        this.parent.appendChild (this.element);
    },
    
    attachToFrame : function (iframe) {
        this.iframe = iframe || this.iframe;
        this.frameDoc = iframe.contentWindow.document;
    },
    
    run : function () {
        this.frameDoc.open();
        this.frameDoc.write(this.element.value);
        this.frameDoc.close();
    },
};


</script>

</html>
